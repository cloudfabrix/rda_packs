{
    "name": "dashboard_documentation",
    "label": "Dashboard Documentation Widgets",
    "live_edit": true,
    "version": "25.2.25.1",
    "description": "Documentation Widgets",
    "dashboard_type": "dashboard",
    "enabled": false,
    "dashboard_sections": [
        {
            "title": "Documentation",
            "widgets": [
                {
                    "title": "Documentation",
                    "widget_type": "custom_widget",
                    "widget_implementation": "dashboard_documentation/dashboard_documentation_widget",
                    "min_width": 12,
                    "min_height": 12,
                    "widget_id": "4e2d534c",
                    "fixed_variables": {
                        "help_yaml_source_dashboard": "dashboard_documentation",
                        "help_yaml_source_attachment": "getting_started",
                        "help_title": "Getting Started",
                        "help_default": "{ \"sections\": [ { \"title\": \"Documentation not found\" } ] }"
                    }
                }
            ]
        }
    ],
    "custom_widgets": {
        "dashboard_documentation_widget": {
            "artifacts": {
                "main": {
                    "attachment": "main.html",
                    "content_type": "text/html",
                    "is_template": true
                }
            }
        }
    },
    "saved_time": "2025-06-30T07:42:48.164506",
    "attachments": [
        {
            "name": "main.html",
            "value": "\n{%-\n    set docContentsYaml = engine.get_dashboard_attachment(help_yaml_source_dashboard, help_yaml_source_attachment, defaultValue=help_default)\n-%}\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>r</title>\n    <style>\n        body {\n            font-family: Avenir, Helvetica, Arial, sans-serif;\n            margin: 20px;\n            padding: 20px;\n            max-width0: 1000px;\n            margin: auto;\n            background-color: #121212;\n            color: #fff;\n        }\n        .editor-container {\n            width: 90%;\n            height: 300px;\n            margin: 10px auto;\n            border: 0px solid #ccc;\n        }\n        #toc {\n            background: #282F3A;\n            padding: 10px;\n            margin-bottom: 20px;\n            border-radius: 8px;\n        }\n    \n        h2 {\n            color:#90CAF9;\n            border-bottom: 1px solid #607D8B;\n            padding-bottom: 5px;\n            margin-top: 55px;\n        }\n        h3 {\n            color: #BBDEFB;\n        }\n        p {\n            line-height: 1.6;\n            font-size: 14px;\n        }\n        ol{\n            font-size: 14px;\n        }\n        a {\n            color: #42A5F5;\n            text-decoration: none;\n        }\n        ul{\n            list-style:none;\n        }\n        li {\n            margin: 8px 0;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n        img {\n            max-width: 100%;\n            height: auto;\n            margin-top: 10px;\n            border-radius: 5px;\n        }\n        .tabs {\n            display: flex;\n            border-bottom: 2px solid #ccc;\n        }\n        .tab {\n            padding: 10px 20px;\n            cursor: pointer;\n            border: 1px solid #ccc;\n            border-bottom: none;\n            background: #494949;\n            border-top-left-radius: 10px;\n            border-top-right-radius: 10px;\n        }\n        .tab.active {\n            background: #3333a9;\n            font-weight: bold;\n        }\n        .tab-content {\n            display: block;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 10px;\n        }\n        .tab-content.active {\n            display: block;\n        }\n    </style>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-yaml/4.1.0/js-yaml.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\"></script>\n    <script>\n        window.MonacoEnvironment = {\n            getWorkerUrl: function (workerId, label) {\n                return `data:text/javascript;charset=utf-8,` +\n                    `importScripts('https://unpkg.com/monaco-editor@0.34.0/min/vs/base/worker/workerMain.js');`;\n            }\n        };\n    </script>\n    <script src=\"https://unpkg.com/monaco-editor@0.34.0/min/vs/loader.js\"></script>\n</head>\n<body>\n<h1>{{help_title}}</h1>\n    <div id=\"toc\">\n        <ul id=\"index\"></ul>\n    </div>\n    <div id=\"content\"></div>\n\n    <script>\n        const yamlData = `{{docContentsYaml}}`;\n        \n        const data = jsyaml.load(yamlData);\n        renderDocumentation(data);\n        \n        function renderDocumentation(data) {\n            const indexEl = document.getElementById('index');\n            const contentEl = document.getElementById('content');\n            indexEl.innerHTML = '';\n            contentEl.innerHTML = '';\n\n            data.sections.forEach((section, sectionIndex) => {\n                const sectionId = `section-${sectionIndex}`;\n                indexEl.innerHTML += `<li><a href=\"#${sectionId}\">${section.title}</a></li>`;\n                contentEl.innerHTML += `<h2 id=\"${sectionId}\">${section.title}</h2>`;\n                contentEl.innerHTML += `<p>${section.description || ''}</p>`;\n                \n                if (section.image) {\n                    contentEl.innerHTML += `<img src=\"${section.image}\" alt=\"${section.title}\">`;\n                }\n\n                if (section.subsections) {\n                    section.subsections.forEach((sub, subIndex) => {\n                        const subId = `${sectionId}-sub-${subIndex}`;\n                        indexEl.innerHTML += `<li style=\"margin-left: 20px;\"><a href=\"#${subId}\">${sub.title}</a></li>`;\n                        contentEl.innerHTML += `<h3 id=\"${subId}\">${sub.title}</h3>`;\n                        contentEl.innerHTML += `<p>${sub.description || ''}</p>`;\n                    });\n                }\n            });\n        }\n\n        function showTab(event, tabId) {\n            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));\n            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));\n            document.querySelectorAll('.tab-content').forEach(tabContent => tabContent.style.display = 'none');\n            \n            document.getElementById(tabId).classList.add('active');\n            event.currentTarget.classList.add('active');\n            document.getElementById(tabId).style.display = 'block';\n        }\n    </script>\n    <script>\n        require.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@0.34.0/min/vs' } });\n\n        require(['vs/editor/editor.main'], function () {\n            document.querySelectorAll('.editor-container').forEach(container => {\n                let code = container.textContent.trim();\n                let language = container.getAttribute('data-language') || 'javascript';\n                let theme = container.getAttribute('data-theme') || 'vs-dark';\n\n                container.innerHTML = \"\"; // Clear text to prevent duplication\n\n                monaco.editor.create(container, {\n                    value: code,\n                    language: language,\n                    theme: theme,\n                    readOnly: true\n                });\n            });\n        });\n    </script>\n</body>\n</html>\n"
        },
        {
            "name": "exampleHelp1.yml",
            "value": "sections:\n  - title: Introduction\n    description: \"Welcome to the documentation.\"\n    image0: \"/iconpub/packs_table\"\n    subsections:\n      - title: Overview\n        description: \"An overview of the system.\"\n      - title: Purpose\n        description: |\n            Example code snippet\n            <div class=\"editor-container\" data-language=\"python\" data-theme=\"vs-light\">\n            # Sample Python Code\n            def greet(name):\n                print(f\"Hello, {name}!\")\n\n            greet(\"World\")\n            </div>\n        \n  - title: Getting Started\n    description: \"How to set up the project.\"\n    subsections:\n      - title: Installation\n        description: \"Steps to install.\"\n      - title: Configuration\n        description: \"How to configure settings.\"\n  - title: Advanced Topics\n    description: \"Deep dive into advanced features.\"\n    subsections:\n      - title: Optimization\n        description: \"Tips for optimizing performance.\"\n      - title: Debugging\n        description: \"<img src='/iconpub/iosxr'/>How to <b>troubleshoot</b> issues.\"\n"
        },
        {
            "name": "getting_started",
            "value": "sections:\n  - title: About Data\n    description: |\n        The RDA Platform has three types of methods to store data.\n    image0: \"/iconpub/packs_table\"\n    subsections:\n      - title: Datasets\n        description: |\n            Datasets are semi-static data that are stored within the platform's object store. Datasets are typically contain enrichment information that may be consumed by RDA Pipelines and dashboards.\n            \n            Datasets can be added to the platform using one of the following methods:\n                <ol>\n                <li> <b>Upload via UI</b>: In this training app, navigate to Data &rarr; Datasets and can be uploaded using \"Add Dataset\" action.\n                <li> <b>Upload via API</b>: REST APIs provide mechanism to manage datasets progrmmatically.\n                <li> <b>Create via RDA Pipelines</b>: RDA Pipelines can create or update datasets and store the data collected from external sources.\n                </ol>\n                <p/>\n\n      - title: Persistent Streams\n        description: |\n            RDAF <a href='https://docs.fabrix.ai/beginners_guide/persistent_streams/' target='_blank'>Persistent streams</a> are schema-on-read data stores that automatically index incoming data for efficient retrieval and querying. Persistent streams can be created using API or UI. \n            \n            Data streams is typically popupulated using RDA Pipelines data pulled from other sources using APIs or through  message queues like Kafka, or through RDA Event Gateway for logs & traces.\n\n      - title: Graph DB\n        description: |\n            Graph DB stores topologies and dependency maps in a Graph Database, which allows traversal of complex network topologies during correlation.\n             \n      - title: Graphs\n        description: |\n            Example code snippet\n            <div class=\"editor-container\" data-language=\"python\" data-theme=\"vs-dark\">\n            # Sample Python Code\n            def greet(name):\n                print(f\"Hello, {name}!\")\n\n            greet(\"World\")\n            </div>\n        \n  - title: Getting Started\n    description: \"How to set up the project.\"\n    subsections:\n      - title: Installation\n        description: \"Steps to install.\"\n      - title: Configuration\n        description: \"How to configure settings.\"\n  - title: Advanced Topics\n    description: \"Deep dive into advanced features.\"\n    subsections:\n      - title: Optimization\n        description: \"Tips for optimizing performance.\"\n      - title: Debugging\n        description: \"<img src='/iconpub/iosxr'/>How to <b>troubleshoot</b> issues.\"\n"
        }
    ]
}